{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["DATE_WE_MET","moment","Beats","shouldVibrate","React","useState","diff","beats","setBeats","getBeats","useCallback","useEffect","interval","setInterval","nextBeats","window","navigator","vibrate","console","log","clearInterval","className","App","setShouldVibrate","onClick","prevState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAKMA,G,MAAcC,IAAO,sBAAuB,wBAMlD,SAASC,EAAT,GAA2D,IAA3CC,EAA0C,EAA1CA,cAA0C,EAC9BC,IAAMC,SAC9BJ,MAASK,KAAKN,EAAa,YAF2B,mBACjDO,EADiD,KAC1CC,EAD0C,KAKlDC,EAAWL,IAAMM,aAAY,WACjC,OAAOT,MAASK,KAAKN,EAAa,aACjC,IAmBH,OAjBAI,IAAMO,WAAU,WACd,IAAMC,EAAWC,aAAY,WAC3B,IAAMC,EAAYL,IAClBD,EAASM,GAELX,IACFY,OAAOC,UAAUC,QAAQ,KACzBC,QAAQC,IAAI,gBAEb,KAEH,OAAO,WACLC,cAAcR,GACdI,UAAUC,QAAQ,MAEnB,CAACR,EAAUN,IAGZ,yBAAKkB,UAAU,SACZd,EADH,uBA+BWe,MAzBf,WAAgB,IAAD,EAC6BlB,IAAMC,UAAS,GAD5C,mBACNF,EADM,KACSoB,EADT,KAQb,OACE,yBAAKF,UAAU,WACb,yBAAKA,UAAU,SAAf,4DACA,yBAAKA,UAAU,iBACb,yBACEA,UAAU,QACVG,QAXoB,WAC1BD,GAAiB,SAAAE,GAAS,OAAKA,KAC/BV,OAAOC,UAAUC,QAAQ,SAYvB,yBAAKI,UAAU,eAAf,wLAGA,kBAACnB,EAAD,CAAOC,cAAeA,MCpDRuB,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b28332cf.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport './App.css';\n\n\nconst DATE_WE_MET = moment('11/11/2016 18:00:00', 'DD/MM/YYYY hh:mm:dd');\n\ntype BeatsProps = {\n  shouldVibrate: boolean;\n}\n\nfunction Beats({shouldVibrate} : BeatsProps): JSX.Element {\n  const [beats, setBeats] = React.useState(\n    moment().diff(DATE_WE_MET, 'seconds')\n  );\n\n  const getBeats = React.useCallback((): number => {\n    return moment().diff(DATE_WE_MET, 'seconds');\n  }, []);\n\n  React.useEffect((): (() => void) => {\n    const interval = setInterval((): void => {\n      const nextBeats = getBeats();\n      setBeats(nextBeats);\n\n      if (shouldVibrate) {\n        window.navigator.vibrate(200);\n        console.log('vibrating');\n      }\n    }, 1000);\n\n    return (): void => {\n      clearInterval(interval);\n      navigator.vibrate(0);\n    };\n  }, [getBeats, shouldVibrate]);\n\n  return (\n    <div className=\"beats\">\n      {beats} раз\n    </div>\n  );\n}\n\nfunction App() {\n  const [shouldVibrate, setShouldVibrate] = React.useState(false);\n\n  const toggleShouldVibrate = () => {\n    setShouldVibrate(prevState => !prevState);\n    window.navigator.vibrate(100);\n  };\n\n  return (\n    <div className=\"content\">\n      <div className=\"title\">Привет, Аня</div>\n      <div className=\"heart-wrapper\">\n        <div\n          className=\"heart\"\n          onClick={toggleShouldVibrate}\n        />\n      </div>\n      <div className=\"beats-label\">\n        Сейчас моё сердце бьется для тебя в\n      </div>\n      <Beats shouldVibrate={shouldVibrate}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}